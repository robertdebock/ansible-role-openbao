---
# tasks file for openbao

- name: Import assert.yml
  ansible.builtin.import_tasks:
    file: assert.yml
  run_once: true
  delegate_to: localhost

- name: Ensure download directory exists
  ansible.builtin.file:
    path: "{{ openbao_download_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

# Download OpenBao GPG key with SSL verification disabled to handle
# older Ubuntu versions (Focal, Jammy) with outdated CA certificates
- name: Download OpenBao GPG key
  ansible.builtin.get_url:
    url: "{{ openbao_gpg_key_url }}"
    dest: "{{ openbao_gpg_key_path }}"
    mode: "0644"
    validate_certs: "{{ openbao_validate_gpg_ssl }}"

- name: Import OpenBao GPG key (apt)
  when:
    - ansible_pkg_mgr in [ "apt" ]
  block:
    - name: Import OpenBao GPG key (apt) - modern method
      ansible.builtin.shell: |
        gpg --dearmor -o /usr/share/keyrings/openbao-archive-keyring.gpg {{ openbao_gpg_key_path }}
      args:
        creates: /usr/share/keyrings/openbao-archive-keyring.gpg
  rescue:
    - name: Import OpenBao GPG key (apt) - legacy method
      ansible.builtin.apt_key:
        file: "{{ openbao_gpg_key_path }}"
        state: present

- name: Import OpenBao GPG key (dnf/dnf5/yum)
  ansible.builtin.rpm_key:
    key: "{{ openbao_gpg_key_path }}"
    state: present
  when:
    - ansible_pkg_mgr in [ "dnf", "dnf5", "yum" ]

- name: Download OpenBao package
  ansible.builtin.get_url:
    url: "{{ openbao_package_url }}"
    dest: "{{ openbao_local_pkg }}"
    mode: "0644"
    validate_certs: "{{ openbao_validate_gpg_ssl }}"

- name: Install OpenBao (apt-based)
  ansible.builtin.apt:
    deb: "{{ openbao_local_pkg }}"
    state: present
  when:
    - ansible_pkg_mgr in [ "apt" ]
  notify:
    - Restart OpenBao

- name: Install OpenBao (rpm-based)
  ansible.builtin.dnf:
    name: "{{ openbao_local_pkg }}"
    state: present
  when:
    - ansible_pkg_mgr in [ "dnf", "dnf5", "yum" ]
  notify:
    - Restart OpenBao

- name: Ensure OpenBao plugin directory exists
  ansible.builtin.file:
    path: "{{ openbao_plugin_directory }}"
    state: directory
    owner: openbao
    group: openbao
    mode: "0755"
  when:
    - openbao_plugin_directory is defined
    - openbao_plugin_directory | length > 0
    - openbao_plugins | length > 0

- name: Download OpenBao plugins
  ansible.builtin.get_url:
    url: "{{ item.download_url }}"
    dest: "{{ openbao_download_dir.rstrip('/') }}/{{ item.name }}-{{ item.version }}.tar.gz"
    mode: "0644"
    validate_certs: "{{ openbao_plugin_validate_certs }}"
  loop: "{{ openbao_plugins }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - openbao_plugins | length > 0

- name: Extract OpenBao plugins
  ansible.builtin.unarchive:
    src: "{{ openbao_download_dir.rstrip('/') }}/{{ item.name }}-{{ item.version }}.tar.gz"
    dest: "{{ openbao_download_dir.rstrip('/') }}/"
    remote_src: true
    creates: "{{ openbao_download_dir.rstrip('/') }}/{{ (item.download_url | basename) | regex_replace('\\.tar\\.gz$', '') }}"
  loop: "{{ openbao_plugins }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - openbao_plugins | length > 0

- name: Install OpenBao plugins
  ansible.builtin.copy:
    src: "{{ openbao_download_dir.rstrip('/') }}/{{ (item.download_url | basename) | regex_replace('\\.tar\\.gz$', '') }}"
    dest: "{{ openbao_plugin_directory }}/{{ item.name }}"
    owner: openbao
    group: openbao
    mode: "0755"
    remote_src: true
  loop: "{{ openbao_plugins }}"
  loop_control:
    label: "{{ item.name }}"
  notify:
    - Restart OpenBao
  when:
    - openbao_plugins | length > 0

- name: Compute SHA256 for installed plugins
  ansible.builtin.stat:
    path: "{{ openbao_plugin_directory }}/{{ item.name }}"
    checksum_algorithm: sha256
  loop: "{{ openbao_plugins }}"
  loop_control:
    label: "{{ item.name }}"
  register: openbao_plugin_stats
  when:
    - openbao_plugins | length > 0

- name: Show registration guidance for installed plugins (with SHA256)
  ansible.builtin.debug:
    msg: >-
      Register plugin '{{ item.item.name }}' once OpenBao is running and you have a token:
      vault write sys/plugins/catalog/secret/{{ item.item.name }} sha256={{ item.stat.checksum }} command="{{ openbao_plugin_directory }}/{{ item.item.name }}"
  loop: "{{ openbao_plugin_stats.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when:
    - openbao_plugins | length > 0

- name: Clean up downloaded plugin archives
  ansible.builtin.file:
    path: "{{ openbao_download_dir.rstrip('/') }}/{{ item.name }}-{{ item.version }}.tar.gz"
    state: absent
  loop: "{{ openbao_plugins }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - openbao_plugins | length > 0
    - openbao_plugin_cleanup

- name: Clean up extracted plugin binaries
  ansible.builtin.file:
    path: "{{ openbao_download_dir.rstrip('/') }}/{{ (item.download_url | basename) | regex_replace('\\.tar\\.gz$', '') }}"
    state: absent
  loop: "{{ openbao_plugins }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - openbao_plugins | length > 0
    - openbao_plugin_cleanup

- name: Ensure TLS directory exists
  ansible.builtin.file:
    path: "{{ openbao_tls.directory | default('/opt/openbao/tls') }}"
    state: directory
    owner: "{{ openbao_tls.owner | default('openbao') }}"
    group: "{{ openbao_tls.group | default('openbao') }}"
    mode: "0755"
  when:
    - openbao_tls | length > 0

- name: Deploy TLS certificate
  ansible.builtin.copy:
    content: "{{ openbao_tls.cert_content }}"
    dest: "{{ openbao_tls.directory | default('/opt/openbao/tls') }}/{{ openbao_tls.cert_file | default('tls.crt') }}"
    owner: "{{ openbao_tls.owner | default('openbao') }}"
    group: "{{ openbao_tls.group | default('openbao') }}"
    mode: "{{ openbao_tls.cert_mode | default('0644') }}"
    backup: true
  when:
    - openbao_tls | length > 0
    - openbao_tls.cert_content is defined
    - openbao_tls.cert_content | length > 0
  notify:
    - Reload OpenBao

- name: Deploy TLS private key
  ansible.builtin.copy:
    content: "{{ openbao_tls.key_content }}"
    dest: "{{ openbao_tls.directory | default('/opt/openbao/tls') }}/{{ openbao_tls.key_file | default('tls.key') }}"
    owner: "{{ openbao_tls.owner | default('openbao') }}"
    group: "{{ openbao_tls.group | default('openbao') }}"
    mode: "{{ openbao_tls.key_mode | default('0600') }}"
    backup: true
  when:
    - openbao_tls | length > 0
    - openbao_tls.key_content is defined
    - openbao_tls.key_content | length > 0
  notify:
    - Reload OpenBao

- name: Deploy TLS CA certificate
  ansible.builtin.copy:
    content: "{{ openbao_tls.ca_content }}"
    dest: "{{ openbao_tls.directory | default('/opt/openbao/tls') }}/{{ openbao_tls.ca_file | default('ca.crt') }}"
    owner: "{{ openbao_tls.owner | default('openbao') }}"
    group: "{{ openbao_tls.group | default('openbao') }}"
    mode: "{{ openbao_tls.ca_mode | default('0644') }}"
    backup: true
  when:
    - openbao_tls | length > 0
    - openbao_tls.ca_content is defined
    - openbao_tls.ca_content | length > 0
  notify:
    - Reload OpenBao

- name: Ensure storage path exists for file/raft backends
  ansible.builtin.file:
    path: "{{ openbao_storage.path }}"
    state: directory
    owner: openbao
    group: openbao
    mode: "0750"
  when:
    - openbao_storage.type in [ 'file', 'raft' ]

- name: Configure OpenBao (without orchestration)
  ansible.builtin.template:
    src: openbao.hcl.j2
    dest: /etc/openbao/openbao.hcl
    owner: openbao
    group: openbao
    mode: "0600"
  notify:
    - Restart OpenBao
  when:
    - openbao_initialize | length == 0

- name: Self Initialization | Include self_init.yml
  ansible.builtin.include_tasks:
    file: self_init.yml
  when:
    - openbao_initialize | length > 0

- name: Manage OpenBao service
  ansible.builtin.systemd:
    name: openbao
    state: started
    enabled: true
